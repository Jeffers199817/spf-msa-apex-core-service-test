/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pichincha.spfmsaapexcoreservice.api;

import com.pichincha.spfmsaapexcoreservice.model.AccountDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T22:09:14.182490100-05:00[America/Bogota]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CREATE_ACCOUNT = "/accounts";
    /**
     * POST /accounts : Create account
     * Create bank account
     *
     * @param accountDTO Create bank account (required)
     * @return Successful operation (status code 200)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "createAccount",
        summary = "Create account",
        description = "Create bank account",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDTO.class))
            }),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AccountsApi.PATH_CREATE_ACCOUNT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountDTO> createAccount(
        @Parameter(name = "AccountDTO", description = "Create bank account", required = true) @Valid @RequestBody AccountDTO accountDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"clientId\" : 1, \"accountType\" : \"SAVINGS\", \"initialBalance\" : 6.027456183070403, \"client\" : { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, \"accountNumber\" : \"accountNumber\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_ACCOUNT = "/accounts/{accountId}";
    /**
     * DELETE /accounts/{accountId} : Delete account
     *
     * @param accountId Account ID to delete (required)
     * @return Successful operation (status code 200)
     *         or Account not found (status code 404)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Delete account",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "404", description = "Account not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = AccountsApi.PATH_DELETE_ACCOUNT
    )
    
    default ResponseEntity<Void> deleteAccount(
        @Parameter(name = "accountId", description = "Account ID to delete", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_FIND_ACCOUNT_BY_ID = "/accounts/{accountId}";
    /**
     * GET /accounts/{accountId} : Find account by ID
     *
     * @param accountId Account ID to find (required)
     * @return Successful operation (status code 200)
     *         or Account not found (status code 404)
     */
    @Operation(
        operationId = "findAccountById",
        summary = "Find account by ID",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AccountsApi.PATH_FIND_ACCOUNT_BY_ID,
        produces = { "application/json" }
    )
    
    default ResponseEntity<AccountDTO> findAccountById(
        @Parameter(name = "accountId", description = "Account ID to find", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"clientId\" : 1, \"accountType\" : \"SAVINGS\", \"initialBalance\" : 6.027456183070403, \"client\" : { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, \"accountNumber\" : \"accountNumber\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_ALL_ACCOUNTS = "/accounts";
    /**
     * GET /accounts : Get all accounts
     *
     * @return Successful operation (status code 200)
     *         or Invalid value (status code 400)
     */
    @Operation(
        operationId = "getAllAccounts",
        summary = "Get all accounts",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AccountsApi.PATH_GET_ALL_ACCOUNTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AccountDTO>> getAllAccounts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountId\" : 0, \"clientId\" : 1, \"accountType\" : \"SAVINGS\", \"initialBalance\" : 6.027456183070403, \"client\" : { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, \"accountNumber\" : \"accountNumber\", \"status\" : true }, { \"accountId\" : 0, \"clientId\" : 1, \"accountType\" : \"SAVINGS\", \"initialBalance\" : 6.027456183070403, \"client\" : { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, \"accountNumber\" : \"accountNumber\", \"status\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_ACCOUNT = "/accounts/{accountId}";
    /**
     * PUT /accounts/{accountId} : Update account
     *
     * @param accountId Account ID to update (required)
     * @param accountDTO Update account (required)
     * @return Successful operation (status code 200)
     *         or Account not found (status code 404)
     */
    @Operation(
        operationId = "updateAccount",
        summary = "Update account",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = AccountsApi.PATH_UPDATE_ACCOUNT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountDTO> updateAccount(
        @Parameter(name = "accountId", description = "Account ID to update", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "AccountDTO", description = "Update account", required = true) @Valid @RequestBody AccountDTO accountDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"clientId\" : 1, \"accountType\" : \"SAVINGS\", \"initialBalance\" : 6.027456183070403, \"client\" : { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, \"accountNumber\" : \"accountNumber\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
