/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pichincha.spfmsaapexcoreservice.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import com.pichincha.spfmsaapexcoreservice.model.ReportDTO;
import com.pichincha.spfmsaapexcoreservice.model.ReportResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T22:09:14.182490100-05:00[America/Bogota]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "reports", description = "the reports API")
public interface ReportsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_GENERATE_ACCOUNT_STATEMENT = "/reports";
    /**
     * GET /reports : Generate account statement
     * Generate account statement report
     *
     * @param clientId Client ID (required)
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @return Successful operation (status code 200)
     *         or Invalid value (status code 400)
     */
    @Operation(
        operationId = "generateAccountStatement",
        summary = "Generate account statement",
        description = "Generate account statement report",
        tags = { "reports" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ReportDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ReportsApi.PATH_GENERATE_ACCOUNT_STATEMENT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ReportDTO>> generateAccountStatement(
        @NotNull @Parameter(name = "clientId", description = "Client ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = true) Long clientId,
        @NotNull @Parameter(name = "startDate", description = "Start date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "endDate", description = "End date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23\", \"totalCredits\" : 5.637376656633329, \"initialBalance\" : 0.8008281904610115, \"client\" : \"client\", \"accountNumber\" : \"accountNumber\", \"type\" : \"type\", \"movement\" : 6.027456183070403, \"totalDebits\" : 5.962133916683182, \"status\" : true, \"availableBalance\" : 1.4658129805029452 }, { \"date\" : \"2000-01-23\", \"totalCredits\" : 5.637376656633329, \"initialBalance\" : 0.8008281904610115, \"client\" : \"client\", \"accountNumber\" : \"accountNumber\", \"type\" : \"type\", \"movement\" : 6.027456183070403, \"totalDebits\" : 5.962133916683182, \"status\" : true, \"availableBalance\" : 1.4658129805029452 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GENERATE_ACCOUNT_STATEMENT_WITH_PDF = "/reports/pdf";
    /**
     * GET /reports/pdf : Generate account statement with PDF
     * Generate account statement report in JSON and PDF (base64) format
     *
     * @param clientId Client ID (required)
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @return Successful operation (status code 200)
     *         or Invalid value (status code 400)
     */
    @Operation(
        operationId = "generateAccountStatementWithPdf",
        summary = "Generate account statement with PDF",
        description = "Generate account statement report in JSON and PDF (base64) format",
        tags = { "reports" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReportResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ReportsApi.PATH_GENERATE_ACCOUNT_STATEMENT_WITH_PDF,
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReportResponseDTO> generateAccountStatementWithPdf(
        @NotNull @Parameter(name = "clientId", description = "Client ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = true) Long clientId,
        @NotNull @Parameter(name = "startDate", description = "Start date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "endDate", description = "End date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reportJson\" : [ { \"date\" : \"2000-01-23\", \"totalCredits\" : 5.637376656633329, \"initialBalance\" : 0.8008281904610115, \"client\" : \"client\", \"accountNumber\" : \"accountNumber\", \"type\" : \"type\", \"movement\" : 6.027456183070403, \"totalDebits\" : 5.962133916683182, \"status\" : true, \"availableBalance\" : 1.4658129805029452 }, { \"date\" : \"2000-01-23\", \"totalCredits\" : 5.637376656633329, \"initialBalance\" : 0.8008281904610115, \"client\" : \"client\", \"accountNumber\" : \"accountNumber\", \"type\" : \"type\", \"movement\" : 6.027456183070403, \"totalDebits\" : 5.962133916683182, \"status\" : true, \"availableBalance\" : 1.4658129805029452 } ], \"pdfBase64\" : \"pdfBase64\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
