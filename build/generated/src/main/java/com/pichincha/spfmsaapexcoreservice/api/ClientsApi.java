/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pichincha.spfmsaapexcoreservice.api;

import com.pichincha.spfmsaapexcoreservice.model.ClientDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T22:09:14.182490100-05:00[America/Bogota]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "clients", description = "the clients API")
public interface ClientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CREATE_CLIENT = "/clients";
    /**
     * POST /clients : Create client
     * Create a new client
     *
     * @param clientDTO Create a new client (required)
     * @return Successful operation (status code 200)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "createClient",
        summary = "Create client",
        description = "Create a new client",
        tags = { "clients" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            }),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ClientsApi.PATH_CREATE_CLIENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClientDTO> createClient(
        @Parameter(name = "ClientDTO", description = "Create a new client", required = true) @Valid @RequestBody ClientDTO clientDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_CLIENT = "/clients/{clientId}";
    /**
     * DELETE /clients/{clientId} : Delete client
     * Delete a client
     *
     * @param clientId Client ID to delete (required)
     * @return Successful operation (status code 200)
     *         or Invalid value (status code 400)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "deleteClient",
        summary = "Delete client",
        description = "Delete a client",
        tags = { "clients" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid value"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = ClientsApi.PATH_DELETE_CLIENT
    )
    
    default ResponseEntity<Void> deleteClient(
        @Parameter(name = "clientId", description = "Client ID to delete", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_FIND_CLIENT_BY_ID = "/clients/{clientId}";
    /**
     * GET /clients/{clientId} : Find client by ID
     * Find client by ID
     *
     * @param clientId Client ID to find (required)
     * @return Successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findClientById",
        summary = "Find client by ID",
        description = "Find client by ID",
        tags = { "clients" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ClientsApi.PATH_FIND_CLIENT_BY_ID,
        produces = { "application/json" }
    )
    
    default ResponseEntity<ClientDTO> findClientById(
        @Parameter(name = "clientId", description = "Client ID to find", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_ALL_CLIENTS = "/clients";
    /**
     * GET /clients : Get all clients
     *
     * @return Successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "getAllClients",
        summary = "Get all clients",
        tags = { "clients" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ClientDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ClientsApi.PATH_GET_ALL_CLIENTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ClientDTO>> getAllClients(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }, { \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_CLIENT = "/clients/{clientId}";
    /**
     * PUT /clients/{clientId} : Update client
     * Update an existing client
     *
     * @param clientId Client ID to update (required)
     * @param clientDTO Update an existing client (required)
     * @return Successful operation (status code 200)
     *         or Invalid value (status code 400)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "updateClient",
        summary = "Update client",
        description = "Update an existing client",
        tags = { "clients" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid value"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = ClientsApi.PATH_UPDATE_CLIENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClientDTO> updateClient(
        @Parameter(name = "clientId", description = "Client ID to update", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId,
        @Parameter(name = "ClientDTO", description = "Update an existing client", required = true) @Valid @RequestBody ClientDTO clientDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"clientId\" : 0, \"identification\" : \"identification\", \"address\" : \"address\", \"gender\" : \"gender\", \"phone\" : \"phone\", \"name\" : \"name\", \"age\" : 6, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
